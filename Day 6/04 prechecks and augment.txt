managed implementation in class zbp_ats_xx_travel unique;
//guideline and best practice for definition to be followed
strict ( 2 );
//add draft feature at BO level
with draft;

//define the behavior for root entity
define behavior for ZATS_XX_TRAVEL alias Travel
//make the behavior pool/implemetation for travel
implementation in class zbp_ats_xx_travel unique
//telling the framework to insert data in this db table for travel request
persistent table /dmo/travel_m
//how the RAP should handle the locks - if a travel request is locked
//the other users cannot edit the childs - like its bookings and suppl
lock master
//mandatory to use total etag
total etag LastChangedAt
//controls the permissions and security settings for our RAP BO
authorization master ( instance )
//specify the draft table - will created by the rap framework
draft table zats_d_travel
//controlling the concurrency
etag master LastChangedAt
early numbering
with additional save
{
  //here are the operations which RAP with generate automatically (manage)
  create ( precheck );
  update ( precheck );
  delete;
  //a booking can only be created with travel request
  //dynamic feature control
  //Add draft also for booking
  association _Booking { create (features:instance); with draft; }

  //its a piece of code which is intented to be only
  //consumed within our RAP BO
  internal action reCalcTotalPrice;
  //Define determination to execute the code when
  //booking fee or curr code changes so we calc total price
  determination calculateTotalPrice on modify
            { create; field BookingFee, CurrencyCode; }

  //Checking custom business object rules
  validation validateHeaderData on save {create; field CustomerId, BeginDate, EndDate;}

  //static feature control
  field (readonly) TravelId, TotalPrice, CreatedBy, CreatedAt, LastChangedBy, LastChangedAt;
  field (mandatory) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;

  //data actions using factory action to create new instances of BO
  factory action copyTravel[1];

  //create a new determine action
  determine action validationCustomer { validation validateHeaderData; }
  //Adding side-effect which inform RAP to reaload the total price if the booking
  //fee has been changed on the Frontend
  side effects {
    field BookingFee affects field TotalPrice;
    determine action validationCustomer executed on field CustomerId affects messages;
  }

  //adding the draft actions
  draft determine action Prepare;
  draft action Edit;
  draft action Resume;
  draft action Activate;
  draft action Discard;

  mapping for /dmo/travel_m{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
    CreatedAt = created_at;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZATS_XX_BOOKING alias Booking
//make the behavior pool/implemetation for booking
implementation in class zbp_ats_xx_booking unique
//telling the framework to insert data in this db table for booking
persistent table /dmo/booking_m
//draft table for the booking
draft table zats_d_book
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;

  //Reconfirm that booking will create with travel draft
  association _Travel { with draft; }
  //Assure that child entity also managed with draft
  association _BookingSupplement { create; with draft; }

  //add a determination for the change in the booking also
  //TODO: Why the booking code is not triggering
  determination calculateTotalPrice on modify
            { field FlightPrice, CurrencyCode; }

  //Side effect
  side effects {
    field FlightPrice affects field _Travel.TotalPrice;
  }

  mapping for /dmo/booking_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    BookingStatus = booking_status;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZATS_XX_BOOKSUPPL alias BookSuppl
//make the behavior pool/implemetation for travel
implementation in class zbp_ats_xx_boosuppl unique
//telling the framework to insert data in this db table for booking suppl
persistent table /dmo/booksuppl_m
draft table zats_d_booksp
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) BookingId, TravelId, BookingSupplementId;
  field ( mandatory ) Price, SupplementId;

  association _Travel { with draft; }
  association _Booking { with draft; }

  mapping for /dmo/booksuppl_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingSupplementId = booking_supplement_id;
    SupplementId = supplement_id;
    Price = price;
    CurrencyCode = currency_code;
    LastChangedAt = last_changed_at;
  }
}










CLASS lsc_zats_xx_travel DEFINITION INHERITING FROM cl_abap_behavior_saver.

  PROTECTED SECTION.

    METHODS save_modified REDEFINITION.

ENDCLASS.

CLASS lsc_zats_xx_travel IMPLEMENTATION.

  METHOD save_modified.

    DATA: travel_log_update TYPE STANDARD TABLE OF /dmo/log_travel,
          final_changes     TYPE STANDARD TABLE OF /dmo/log_travel.

    IF update-travel IS NOT INITIAL.

      travel_log_update = CORRESPONDING #( update-travel MAPPING
                                              travel_id = TravelId
       ).

      LOOP AT update-travel ASSIGNING FIELD-SYMBOL(<travel_log_update>).

        ASSIGN travel_log_update[ travel_id = <travel_log_update>-TravelId ]
            TO FIELD-SYMBOL(<travel_log_db>).

        GET TIME STAMP FIELD <travel_log_db>-created_at.

        IF <travel_log_update>-%control-CustomerId = if_abap_behv=>mk-on.

          <travel_log_db>-change_id = cl_system_uuid=>create_uuid_x16_static( ).
          <travel_log_db>-changed_field_name = 'anubhav_customer'.
          <travel_log_db>-changed_value = <travel_log_update>-CustomerId.
          <travel_log_db>-changing_operation = 'CHANGE'.

          APPEND <travel_log_db> TO final_changes.

        ENDIF.

        IF <travel_log_update>-%control-AgencyId = if_abap_behv=>mk-on.

          <travel_log_db>-change_id = cl_system_uuid=>create_uuid_x16_static( ).
          <travel_log_db>-changed_field_name = 'anubhav_agency'.
          <travel_log_db>-changed_value = <travel_log_update>-AgencyId.
          <travel_log_db>-changing_operation = 'CHANGE'.

          APPEND <travel_log_db> TO final_changes.

        ENDIF.

      ENDLOOP.

      INSERT /dmo/log_travel FROM TABLE @final_changes.

    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.
    METHODS copytravel FOR MODIFY
      IMPORTING keys FOR ACTION travel~copytravel.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR travel RESULT result.
    METHODS recalctotalprice FOR MODIFY
      IMPORTING keys FOR ACTION travel~recalctotalprice.

    METHODS calculatetotalprice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR travel~calculatetotalprice.
    METHODS validateheaderdata FOR VALIDATE ON SAVE
      IMPORTING keys FOR travel~validateheaderdata.
    METHODS precheck_create FOR PRECHECK
      IMPORTING entities FOR CREATE travel.

    METHODS precheck_update FOR PRECHECK
      IMPORTING entities FOR UPDATE travel.
    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE travel.

    METHODS earlynumbering_cba_booking FOR NUMBERING
      IMPORTING entities FOR CREATE travel\_booking.

    types:  t_entity_create type table for create zats_xx_travel,
              t_entity_update TYPE table for update zats_xx_travel,
              t_entity_rep type table for REPORTED zats_xx_travel,
              t_entity_err type table for FAILED zats_xx_travel.

    methods precheck_anubhav_reuse
        importing
            entities_u type t_entity_update optional
            entities_c type t_entity_create optional
         exporting
            reported type t_entity_rep
            failed type t_entity_err.


ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD get_instance_authorizations.

    data : ls_result like line of result.

    "Step 1: Get the data of my instance
    READ ENTITIES OF zats_xx_travel in LOCAL MODE
        ENTITY travel
            fields ( travelid OverallStatus )
                WITH CORRESPONDING #( keys )
                    RESULT data(lt_travel)
                    FAILED data(ls_failed).

    "Step 2: loop at the data
    loop at lt_travel into data(ls_travel).

        "Step 3: Check if the instance was having status = cancelled
        if ( ls_travel-OverallStatus = 'X' ).
            data(lv_auth) = abap_false.

            "Step 4: Check for authorization in org
*            AUTHORITY-CHECK OBJECT 'CUSTOM_OBJ'
*                ID 'FIELD_NAME' FIELD field1
*            IF sy-subrc = 0.
*                lv_auth = abap_true.
*            ENDIF.
        else.
            lv_auth = abap_true.
        ENDIF.

        ls_result = value #( TravelId = ls_travel-TravelId
                             %update = COND #( when lv_auth eq abap_false
                                                    then if_abap_behv=>auth-unauthorized
                                                    else    if_abap_behv=>auth-allowed
                                             )
                             %action-copyTravel = COND #( when lv_auth eq abap_false
                                                    then if_abap_behv=>auth-unauthorized
                                                    else    if_abap_behv=>auth-allowed
                                             )
        ).

        ""Finally send the result out to RAP
        APPEND ls_result to result.

    ENDLOOP.

  ENDMETHOD.

  METHOD earlynumbering_create.

    DATA: entity        TYPE STRUCTURE FOR CREATE zats_xx_travel,
          travel_id_max TYPE /dmo/travel_id.

    ""Step 1: Ensure that Travel id is not set for the record which is coming
    LOOP AT entities INTO entity WHERE TravelId IS NOT INITIAL.
      APPEND CORRESPONDING #( entity ) TO mapped-travel.
    ENDLOOP.

    DATA(entities_wo_travelid) = entities.
    DELETE entities_wo_travelid WHERE TravelId IS NOT INITIAL.

    ""Step 2: Get the seuquence numbers from the SNRO
    TRY.
        cl_numberrange_runtime=>number_get(
          EXPORTING
            nr_range_nr       = '01'
            object            = CONV #( '/DMO/TRAVL' )
            quantity          =  CONV #( lines( entities_wo_travelid ) )
          IMPORTING
            number            = DATA(number_range_key)
            returncode        = DATA(number_range_return_code)
            returned_quantity = DATA(number_range_returned_quantity)
        ).
*        CATCH cx_nr_object_not_found.
*        CATCH cx_number_ranges.

      CATCH cx_number_ranges INTO DATA(lx_number_ranges).
        ""Step 3: If there is an exception, we will throw the error
        LOOP AT entities_wo_travelid INTO entity.
          APPEND VALUE #( %cid = entity-%cid %key = entity-%key %msg = lx_number_ranges )
              TO reported-travel.
          APPEND VALUE #( %cid = entity-%cid %key = entity-%key ) TO failed-travel.
        ENDLOOP.
        EXIT.
    ENDTRY.

    CASE number_range_return_code.
      WHEN '1'.
        ""Step 4: Handle especial cases where the number range exceed critical %
        LOOP AT entities_wo_travelid INTO entity.
          APPEND VALUE #( %cid = entity-%cid %key = entity-%key
                          %msg = NEW /dmo/cm_flight_messages(
                                      textid = /dmo/cm_flight_messages=>number_range_depleted
                                      severity = if_abap_behv_message=>severity-warning
                          ) )
              TO reported-travel.
        ENDLOOP.
      WHEN '2' OR '3'.
        ""Step 5: The number range return last number, or number exhaused
*        APPEND VALUE #( %cid = entity-%cid %key = entity-%key
*                            %msg = NEW /dmo/cm_flight_messages(
*                                        textid = /dmo/cm_flight_messages=>not_sufficient_numbers
*                                        severity = if_abap_behv_message=>severity-warning
*                            ) )
*                TO reported-travel.
*        APPEND VALUE #( %cid = entity-%cid
*                        %key = entity-%key
*                        %fail-cause = if_abap_behv=>cause-conflict
*                         ) TO failed-travel.

        LOOP AT entities_wo_travelid INTO entity.
          APPEND VALUE #( %cid = entity-%cid
                          %key = entity-%key
                          %msg = NEW /dmo/cm_flight_messages(
                                      textid = /dmo/cm_flight_messages=>not_sufficient_numbers
                                      severity = if_abap_behv_message=>severity-warning )
                        ) TO reported-travel.
          APPEND VALUE #( %cid        = entity-%cid
                          %key        = entity-%key
                          %fail-cause = if_abap_behv=>cause-conflict
                        ) TO failed-travel.
        ENDLOOP.
        EXIT.
    ENDCASE.

    ""Step 6: Final check for all numbers
    ASSERT number_range_returned_quantity = lines( entities_wo_travelid ).

    ""Step 7: Loop over the incoming travel data and asign the numbers from number range and
    ""        return MAPPED data which will then go to RAP framework
    travel_id_max = number_range_key - number_range_returned_quantity.

    LOOP AT entities_wo_travelid INTO entity.

      travel_id_max += 1.
      entity-TravelId = travel_id_max.

      APPEND VALUE #( %cid = entity-%cid
                      %key = entity-%key
                      "Missed the draft setting for number range
                      %is_draft = entity-%is_draft ) TO mapped-travel.
    ENDLOOP.

  ENDMETHOD.

  METHOD earlynumbering_cba_Booking.

    DATA max_booking_id TYPE /dmo/booking_id.

    ""Step 1: get all the travel requests and their booking data
    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
        ENTITY travel BY \_Booking
        FROM CORRESPONDING #( entities )
        LINK DATA(bookings).

    ""Loop at unique travel ids
    LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel_group>) GROUP BY <travel_group>-TravelId.
      ""Step 2: get the highest booking number which is already there
      LOOP AT bookings INTO DATA(ls_booking)
          WHERE source-TravelId = <travel_group>-TravelId.
        IF max_booking_id < ls_booking-target-BookingId.
          max_booking_id = ls_booking-target-BookingId.
        ENDIF.
      ENDLOOP.
      ""Step 3: get the asigned booking numbers for incoming request
      LOOP AT entities INTO DATA(ls_entity)
          WHERE TravelId = <travel_group>-TravelId.
        LOOP AT ls_entity-%target INTO DATA(ls_target).
          IF max_booking_id < ls_target-BookingId.
            max_booking_id = ls_target-BookingId.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
      ""Step 4: loop over all the entities of travel with same travel id
      LOOP AT entities ASSIGNING FIELD-SYMBOL(<travel>)
          WHERE TravelId = <travel_group>-TravelId.
        ""Step 5: assign new booking IDs to the booking entity inside each travel
        LOOP AT <travel>-%target ASSIGNING FIELD-SYMBOL(<booking_wo_numbers>).
          APPEND CORRESPONDING #( <booking_wo_numbers> ) TO mapped-booking
          ASSIGNING FIELD-SYMBOL(<mapped_booking>).
          IF <mapped_booking>-BookingId IS INITIAL.
            max_booking_id += 10.
            "missed the draft settings for the booking number
            <mapped_booking>-%is_draft = <booking_wo_numbers>-%is_draft.
            <mapped_booking>-BookingId = max_booking_id.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.

  METHOD copyTravel.

    DATA: travels       TYPE TABLE FOR CREATE zats_xx_travel\\Travel,
          bookings_cba  TYPE TABLE FOR CREATE zats_xx_travel\\Travel\_Booking,
          booksuppl_cba TYPE TABLE FOR CREATE zats_xx_travel\\Booking\_BookingSupplement.

    "Step 1: Remove the travel instances with initial %cid
    READ TABLE keys WITH KEY %cid = '' INTO DATA(key_with_initial_cid).
    ASSERT key_with_initial_cid IS INITIAL.

    "Step 2: Read all travel, booking and booking supplement using EML
    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
    ENTITY Travel
        ALL FIELDS WITH CORRESPONDING #( keys )
        RESULT DATA(travel_read_result)
        FAILED failed.

    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
    ENTITY Travel BY \_Booking
        ALL FIELDS WITH CORRESPONDING #( travel_read_result )
        RESULT DATA(book_read_result)
        FAILED failed.

    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
    ENTITY booking BY \_BookingSupplement
        ALL FIELDS WITH CORRESPONDING #( book_read_result )
        RESULT DATA(booksuppl_read_result)
        FAILED failed.

    "Step 3: Fill travel internal table for travel data creation - %cid - abc123
    LOOP AT travel_read_result ASSIGNING FIELD-SYMBOL(<travel>).

      "Travel data prepration
      APPEND VALUE #( %cid = keys[ %tky = <travel>-%tky ]-%cid
                     %data = CORRESPONDING #( <travel> EXCEPT travelId )
      ) TO travels ASSIGNING FIELD-SYMBOL(<new_travel>).

      <new_travel>-BeginDate = cl_abap_context_info=>get_system_date( ).
      <new_travel>-EndDate = cl_abap_context_info=>get_system_date( ) + 30.
      <new_travel>-OverallStatus = 'O'.

      "Step 3: Fill booking internal table for booking data creation - %cid_ref - abc123
      APPEND VALUE #( %cid_ref = keys[ %tky = <travel>-%tky ]-%cid )
        TO bookings_cba ASSIGNING FIELD-SYMBOL(<bookings_cba>).

      LOOP AT  book_read_result ASSIGNING FIELD-SYMBOL(<booking>) WHERE TravelId = <travel>-TravelId.

        APPEND VALUE #( %cid = keys[ %tky = <travel>-%tky ]-%cid && <booking>-BookingId
                        %data = CORRESPONDING #( book_read_result[ %tky = <booking>-%tky ] EXCEPT travelid )
        )
            TO <bookings_cba>-%target ASSIGNING FIELD-SYMBOL(<new_booking>).

        <new_booking>-BookingStatus = 'N'.

        "Step 4: Fill booking supplement internal table for booking suppl data creation
        APPEND VALUE #( %cid_ref = keys[ %tky = <travel>-%tky ]-%cid && <booking>-BookingId )
                TO booksuppl_cba ASSIGNING FIELD-SYMBOL(<booksuppl_cba>).

        LOOP AT booksuppl_read_result ASSIGNING FIELD-SYMBOL(<booksuppl>)
             WHERE TravelId = <travel>-TravelId AND
                                   BookingId = <booking>-BookingId.

          APPEND VALUE #( %cid = keys[  %tky = <travel>-%tky ]-%cid && <booking>-BookingId && <booksuppl>-BookingSupplementId
                      %data = CORRESPONDING #( <booksuppl> EXCEPT travelid bookingid )
          )
          TO <booksuppl_cba>-%target.

        ENDLOOP.
      ENDLOOP.


    ENDLOOP.

    "Step 5: MODIFY ENTITY EML to create new BO instance using existing data
    MODIFY ENTITIES OF zats_xx_travel IN LOCAL MODE
        ENTITY travel
            CREATE FIELDS ( AgencyId CustomerId BeginDate EndDate BookingFee TotalPrice CurrencyCode OverallStatus )
                WITH travels
                    CREATE BY \_Booking FIELDS ( Bookingid BookingDate CustomerId CarrierId ConnectionId FlightDate FlightPrice CurrencyCode BookingStatus )
                        WITH bookings_cba
                            ENTITY Booking
                                CREATE BY \_BookingSupplement FIELDS ( bookingsupplementid supplementid price currencycode )
                                    WITH booksuppl_cba
        MAPPED DATA(mapped_create).

    mapped-Travel = mapped_create-travel.

  ENDMETHOD.

  METHOD get_instance_features.

    "Step 1: Read the travel data with status
    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
        ENTITY travel
            FIELDS ( travelid overallstatus )
            WITH     CORRESPONDING #( keys )
        RESULT DATA(travels)
        FAILED failed.

    "Step 2: return the result with booking creation possible or not
    READ TABLE travels INTO DATA(ls_travel) INDEX 1.

    IF ( ls_travel-OverallStatus = 'X' ).
      DATA(lv_allow) = if_abap_behv=>fc-o-disabled.
    ELSE.
      lv_allow = if_abap_behv=>fc-o-enabled.
    ENDIF.

    result = VALUE #( FOR travel IN travels
                        ( %tky = travel-%tky
                          %assoc-_Booking = lv_allow
                        )
                    ).

  ENDMETHOD.

  METHOD reCalcTotalPrice.

*    Define a structure where we can store all the booking fees and currency code
    TYPES : BEGIN OF ty_amount_per_currency,
              amount        TYPE /dmo/total_price,
              currency_code TYPE /dmo/currency_code,
            END OF ty_amount_per_currency.

    DATA : amounts_per_currencycode TYPE STANDARD TABLE OF ty_amount_per_currency.

*    Read all travel instances, subsequent bookings using EML
    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
       ENTITY Travel
       FIELDS ( BookingFee CurrencyCode )
       WITH CORRESPONDING #( keys )
       RESULT DATA(travels).

    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
       ENTITY Travel BY \_Booking
       FIELDS ( FlightPrice CurrencyCode )
       WITH CORRESPONDING #( travels )
       RESULT DATA(bookings).

    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
       ENTITY Booking BY \_BookingSupplement
       FIELDS ( price CurrencyCode )
       WITH CORRESPONDING #( bookings )
       RESULT DATA(bookingsupplements).

*    Delete the values w/o any currency
    DELETE travels WHERE CurrencyCode IS INITIAL.
    DELETE bookings WHERE CurrencyCode IS INITIAL.
    DELETE bookingsupplements WHERE CurrencyCode IS INITIAL.

*    Total all booking and supplement amounts which are in common currency
    LOOP AT travels ASSIGNING FIELD-SYMBOL(<travel>).
      "Set the first value for total price by adding the booking fee from header
      amounts_per_currencycode = VALUE #( ( amount = <travel>-BookingFee
                                          currency_code = <travel>-CurrencyCode ) ).

*    Loop at all amounts and compare with target currency
      LOOP AT bookings INTO DATA(booking) WHERE TravelId = <travel>-TravelId.

        COLLECT VALUE ty_amount_per_currency( amount = booking-FlightPrice
                                              currency_code = booking-CurrencyCode
        ) INTO amounts_per_currencycode.

      ENDLOOP.

      LOOP AT bookingsupplements INTO DATA(bookingsupplement) WHERE TravelId = <travel>-TravelId.

        COLLECT VALUE ty_amount_per_currency( amount = bookingsupplement-Price
                                              currency_code = booking-CurrencyCode
        ) INTO amounts_per_currencycode.

      ENDLOOP.

      CLEAR <travel>-TotalPrice.
*    Perform currency conversion
      LOOP AT amounts_per_currencycode INTO DATA(amount_per_currencycode).

        IF amount_per_currencycode-currency_code = <travel>-CurrencyCode.
          <travel>-TotalPrice += amount_per_currencycode-amount.
        ELSE.

          /dmo/cl_flight_amdp=>convert_currency(
            EXPORTING
              iv_amount               = amount_per_currencycode-amount
              iv_currency_code_source = amount_per_currencycode-currency_code
              iv_currency_code_target = <travel>-CurrencyCode
              iv_exchange_rate_date   = cl_abap_context_info=>get_system_date( )
            IMPORTING
              ev_amount               = DATA(total_booking_amt)
          ).

          <travel>-TotalPrice = <travel>-TotalPrice + total_booking_amt.
        ENDIF.

      ENDLOOP.
*    Put back the total amount

    ENDLOOP.
*    Return the total amount in mapped so the RAP will modify this data to DB
    MODIFY ENTITIES OF    zats_xx_travel IN LOCAL MODE
    ENTITY travel
    UPDATE FIELDS ( TotalPrice )
    WITH CORRESPONDING #( travels ).

  ENDMETHOD.

  METHOD calculateTotalPrice.

    MODIFY ENTITIES OF zats_xx_travel IN LOCAL MODE
        ENTITY travel
            EXECUTE reCalcTotalPrice
            FROM CORRESPONDING #( keys ).

  ENDMETHOD.

  METHOD validateHeaderData.

    "Step 1: Read the travel data
    READ ENTITIES OF zats_xx_travel IN LOCAL MODE
        ENTITY travel
        FIELDS ( CustomerId )
        WITH CORRESPONDING #( keys )
        RESULT DATA(lt_travel).

    "Step 2: Declare a sorted table for holding customer ids
    DATA customers TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    "Step 3: Extract the unique customer IDs in our table
    customers = CORRESPONDING #( lt_travel DISCARDING DUPLICATES MAPPING
                                       customer_id = CustomerId EXCEPT *
     ).
    DELETE customers WHERE customer_id IS INITIAL.

    ""Get the validation done to get all customer ids from db
    ""these are the IDs which are present
    IF customers IS NOT INITIAL.

      SELECT FROM /dmo/customer FIELDS customer_id
      FOR ALL ENTRIES IN @customers
      WHERE customer_id = @customers-customer_id
      INTO TABLE @DATA(lt_cust_db).

    ENDIF.

    ""loop at travel data
    LOOP AT lt_travel INTO DATA(ls_travel).

      IF ( ls_travel-CustomerId IS INITIAL OR
           NOT  line_exists(  lt_cust_db[ customer_id = ls_travel-CustomerId ] ) ).

        ""Inform the RAP framework to terminate the create
        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.
        APPEND VALUE #( %tky = ls_travel-%tky
                        %element-customerid = if_abap_behv=>mk-on
                        %msg = NEW /dmo/cm_flight_messages(
                                      textid                = /dmo/cm_flight_messages=>customer_unkown
                                      customer_id           = ls_travel-CustomerId
                                      severity              = if_abap_behv_message=>severity-error

        )
        ) TO reported-travel.

      ENDIF.

      IF ls_travel-enddate < ls_travel-begindate.  "end_date before begin_date

        APPEND VALUE #( %tky = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky = ls_travel-%tky
                        %msg = NEW /dmo/cm_flight_messages(
                                   textid     = /dmo/cm_flight_messages=>begin_date_bef_end_date
                                   severity   = if_abap_behv_message=>severity-error
                                   begin_date = ls_travel-begindate
                                   end_date   = ls_travel-enddate
                                   travel_id  = ls_travel-travelid )
                        %element-begindate   = if_abap_behv=>mk-on
                        %element-enddate     = if_abap_behv=>mk-on
                     ) TO reported-travel.

      ELSEIF ls_travel-begindate < cl_abap_context_info=>get_system_date( ).  "begin_date must be in the future

        APPEND VALUE #( %tky        = ls_travel-%tky ) TO failed-travel.

        APPEND VALUE #( %tky = ls_travel-%tky
                        %msg = NEW /dmo/cm_flight_messages(
                                    textid   = /dmo/cm_flight_messages=>begin_date_on_or_bef_sysdate
                                    severity = if_abap_behv_message=>severity-error )
                        %element-begindate  = if_abap_behv=>mk-on
                        %element-enddate    = if_abap_behv=>mk-on
                      ) TO reported-travel.
      ENDIF.

    ENDLOOP.

    ""Exercise: Validations
    "1. check if begin and end date is empty
    "2. check if the end date is always > begin date
    "3. begin date of travel should be in future

  ENDMETHOD.

  METHOD precheck_create.

    precheck_anubhav_reuse(
      EXPORTING
*        entities_u =
         entities_c = entities
      IMPORTING
        reported   = reported-travel
        failed     = failed-travel
    ).

  ENDMETHOD.

  METHOD precheck_update.

    precheck_anubhav_reuse(
      EXPORTING
          entities_u = entities
*         entities_c =
      IMPORTING
        reported   = reported-travel
        failed     = failed-travel
    ).

  ENDMETHOD.

  METHOD precheck_anubhav_reuse.

    ""Step 1: Data declaration
    data: entities type t_entity_update,
           operation type if_abap_behv=>t_char01,
           agencies type sorted table of /dmo/agency WITH UNIQUE KEY agency_id,
           customers type sorted table of /dmo/customer WITH UNIQUE key customer_id.

    ""Step 2: Check either entity_c was passed or entity_u was passed
    ASSERT not ( entities_c is initial equiv entities_u is initial ).

    ""Step 3: Perform validation only if agency OR customer was changed
    if entities_c is not initial.
        entities = CORRESPONDING #( entities_c ).
        operation = if_abap_behv=>op-m-create.
    else.
        entities = CORRESPONDING #( entities_u ).
        operation = if_abap_behv=>op-m-update.
    ENDIF.

    delete entities where %control-AgencyId = if_abap_behv=>mk-off and %control-CustomerId = if_abap_behv=>mk-off.

    ""Step 4: get all the unique agencies and customers in a table
    agencies = CORRESPONDING #( entities discarding DUPLICATES MAPPING agency_id = AgencyId EXCEPT * ).
    customers = CORRESPONDING #( entities discarding DUPLICATES MAPPING customer_id = CustomerId EXCEPT * ).

    ""Step 5: Select the agency and customer data from DB tables
    select from /dmo/agency fields agency_id, country_code
    for all ENTRIES IN @agencies where agency_id = @agencies-agency_id
    into table @data(agency_country_codes).

    select from /dmo/customer fields customer_id, country_code
    for all ENTRIES IN @customers where customer_id = @customers-customer_id
    into table @data(customer_country_codes).

    ""Step 6: Loop at incoming entities and compare each agency and customer country
    loop at entities into data(entity).
        read table agency_country_codes with key agency_id = entity-AgencyId into data(ls_agency).
        CHECK sy-subrc = 0.
        read table customer_country_codes with key customer_id = entity-CustomerId into data(ls_customer).
        CHECK sy-subrc = 0.
        if ls_agency-country_code <> ls_customer-country_code.
            ""Step 7: if country doesnt match, throw the error
            append value #(    %cid = cond #( when operation = if_abap_behv=>op-m-create then entity-%cid_ref )
                                      %is_draft = entity-%is_draft
                                      %fail-cause = if_abap_behv=>cause-conflict
              ) to failed.

            append value #(    %cid = cond #( when operation = if_abap_behv=>op-m-create then entity-%cid_ref )
                                      %is_draft = entity-%is_draft
                                      %msg = new /dmo/cm_flight_messages(
                                                                                              textid                = value #(
                                                                                                                                     msgid = 'SY'
                                                                                                                                     msgno = 499
                                                                                                                                     attr1 = 'The country codes for agency and customer not matching'
                                                                                                                                  )
                                                                                              agency_id             = entity-AgencyId
                                                                                              customer_id           = entity-CustomerId
                                                                                              severity  = if_abap_behv_message=>severity-error
                                                                                            )
                                      %element-agencyid = if_abap_behv=>mk-on
              ) to reported.

        ENDIF.
    ENDLOOP.


  ENDMETHOD.

ENDCLASS.












projection;
strict ( 2 );
use draft;

define behavior for ZATS_XX_TRAVEL_PROCESSOR alias Travel
//create a new class for processor implementation
implementation in class zbp_ats_xx_travel_proc unique
{
  use create (augment, precheck) ;
  use update (precheck);
  use delete;

  use action activate;
  use action prepare;
  use action edit;
  use action discard;
  use action resume;

  use action copyTravel;
  use association _Booking { create; with draft; }
}

define behavior for ZATS_XX_BOOKING_PROCESSOR alias Booking
{
  use update;
  use delete;

  use association _Travel { with draft; }
  use association _BookingSupplement { create; with draft; }
}

define behavior for ZATS_XX_BOOKSUPPL_PROCESSOR alias BookingSuppl
{
  use update;
  use delete;

  use association _Travel { with draft; }
  use association _Booking { with draft; }
}








CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS augment_create FOR MODIFY
      IMPORTING entities FOR CREATE Travel.

    METHODS precheck_create FOR PRECHECK
      IMPORTING entities FOR CREATE Travel.

    METHODS precheck_update FOR PRECHECK
      IMPORTING entities FOR UPDATE Travel.

ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD augment_create.

    data: travel_create type table for create zats_xx_travel.

     travel_create = CORRESPONDING #( entities ).

     loop at travel_create assigning field-symbol(<travel>).

        <travel>-AgencyId = '70003'.
        <travel>-OverallStatus = 'O'.
        <travel>-%control-AgencyId = if_abap_behv=>mk-on.
        <travel>-%control-OverallStatus = if_abap_behv=>mk-on.

     ENDLOOP.

     MODIFY augmenting entities of zats_xx_travel
     entity travel
     create from travel_create.

  ENDMETHOD.

  METHOD precheck_create.
  ENDMETHOD.

  METHOD precheck_update.
  ENDMETHOD.

ENDCLASS.






@EndUserText.label: 'My Travel processor projection'
@AccessControl.authorizationCheck: #NOT_REQUIRED
@Metadata.allowExtensions: true
define root view entity ZATS_XX_TRAVEL_PROCESSOR as projection on ZATS_XX_TRAVEL
{
    @ObjectModel.text.element: [ 'Description' ]
    key TravelId,
    @ObjectModel.text.element: [ 'AgencyName' ]
    @Consumption.valueHelpDefinition: [{ 
        entity.name: '/DMO/I_Agency',
        entity.element: 'AgencyID'
     }]
    AgencyId,
    @Semantics.text: true
    _Agency.Name as AgencyName,
    @ObjectModel.text.element: [ 'CustomerName' ]
    @Consumption.valueHelpDefinition: [{ 
        entity.name: '/DMO/I_Customer',
        entity.element: 'CustomerID'
     }]
    CustomerId,
    @Semantics.text: true
    _Customer.LastName as CustomerName,
    BeginDate,
    EndDate,
    BookingFee,
    TotalPrice,
    CurrencyCode,
    @Semantics.text: true
    Description,
    @Consumption.valueHelpDefinition: [{ 
        entity.name: '/DMO/I_Overall_Status_VH',
        entity.element: 'OverallStatus'
     }]
    @ObjectModel.text.element: [ 'StatusText' ]
    OverallStatus,
    CreatedBy,
    CreatedAt,
    LastChangedBy,
    LastChangedAt,
    @Semantics.text: true
    StatusText,
    Criticality,
    /* Associations */
    _Agency,
    _Booking: redirected to composition child ZATS_XX_BOOKING_PROCESSOR,
    _Currency,
    _Customer,
    _OverallStatus,
    @ObjectModel.virtualElementCalculatedBy: 'ABAP:ZCL_ATS_VE_CALC'
    @EndUserText.label: 'CO2 Tax'
    virtual CO2Tax : abap.int4,
    @ObjectModel.virtualElementCalculatedBy: 'ABAP:ZCL_ATS_VE_CALC'
    @EndUserText.label: 'Week Day'
    virtual dayOfTheFlight : abap.char( 9 )
    
}







CLASS zcl_ats_ve_calc DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    "INTERFACES if_sadl_exit .
    INTERFACES if_sadl_exit_calc_element_read .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_ats_ve_calc IMPLEMENTATION.


  METHOD if_sadl_exit_calc_element_read~calculate.

    check not it_original_data is initial.

    data: lt_calc_data type standard table of zats_xx_travel_processor with DEFAULT KEY,
            lv_rate type p DECIMALS 2 VALUE '0.025'.

     lt_calc_data = CORRESPONDING #( it_original_data ).

     loop at lt_calc_data ASSIGNING FIELD-SYMBOL(<fs_calc>).
        <fs_calc>-CO2Tax = <fs_calc>-TotalPrice * lv_rate.
        ""here you can call a BAPI and calculate some values and send those in VE
        <fs_calc>-dayOfTheFlight = 'Sunday'.
     ENDLOOP.

     ct_calculated_data = CORRESPONDING #(  lt_calc_data ).


  ENDMETHOD.


  METHOD if_sadl_exit_calc_element_read~get_calculation_info.
  ENDMETHOD.
ENDCLASS.








@Metadata.layer: #CUSTOMER
@UI.headerInfo:{
    typeName: 'Travel',
    typeNamePlural: 'Travels',
    title: { value: 'TravelId' },
    description: { value: '_Customer.FirstName' }
 }
annotate view ZATS_XX_TRAVEL_PROCESSOR
    with 
{
    @UI.facet: [
                { 
                    purpose: #HEADER,
                    type: #DATAPOINT_REFERENCE,
                    label: 'Flight Ticket Price',
                    position: 10,
                    targetQualifier: 'price_data'
                },
                { 
                    purpose: #HEADER,
                    type: #DATAPOINT_REFERENCE,
                    label: 'Status',
                    position: 20,
                    targetQualifier: 'status'
                },
                { 
                    purpose: #STANDARD,
                    type: #COLLECTION,
                    position: 10,
                    id: 'super',
                    label: 'Additional Details'                
                },
                { 
                    purpose: #STANDARD,
                    type: #IDENTIFICATION_REFERENCE,
                    label: 'More Info',
                    position: 10,
                    parentId: 'super'
                },
                { 
                    purpose: #STANDARD,
                    type: #FIELDGROUP_REFERENCE,
                    label: 'Price data',
                    position: 20,
                    parentId: 'super',
                    targetQualifier: 'pricing'
                },{ 
                    purpose: #STANDARD,
                    type: #FIELDGROUP_REFERENCE,
                    label: 'Dates',
                    position: 30,
                    parentId: 'super',
                    targetQualifier: 'dates'
                },
                { 
                    purpose: #STANDARD,
                    type: #LINEITEM_REFERENCE,
                    label: 'Bookings',
                    position: 20,
                    targetElement: '_Booking'
                }
                ,{ 
                    purpose: #STANDARD,
                    type: #FIELDGROUP_REFERENCE,
                    label: 'Admin Info',
                    position: 40,
                    parentId: 'super',
                    targetQualifier: 'spiderman'
                }
               ]
    @UI.selectionField: [{ position: 10 }]
    @UI.lineItem: [{ position: 10 },
    { type: #FOR_ACTION, label: 'Copy This Travel',
    dataAction: 'copyTravel' }]
    @UI.identification: [{ position: 10 },
    { type: #FOR_ACTION, label: 'Copy Maddi',
    dataAction: 'copyTravel' }]
    TravelId;
    @UI.selectionField: [{ position: 20 }]
    @UI.lineItem: [{ position: 20 }]
    @UI.identification: [{ position: 20 }]
    AgencyId;
    @UI.selectionField: [{ position: 30 }]
    @UI.lineItem: [{ position: 30 }]
    @UI.identification: [{ position: 30 }]
    CustomerId;
    @UI.lineItem: [{ position: 40 }]
    @UI.fieldGroup: [{ qualifier: 'dates', label: 'Start Date', position: 10 }]
    BeginDate;
    @UI.fieldGroup: [{ qualifier: 'dates', label: 'End Date', position: 20 }]
    EndDate;
    @UI.fieldGroup: [{ qualifier: 'pricing', label: 'Booking Fee', position: 10 }]
    BookingFee;
    @UI.selectionField: [{ position: 40 }]
    @UI.lineItem: [{ position: 50 }]
    @UI.dataPoint: { qualifier: 'price_data', title: 'Flight Price' }
    @UI.fieldGroup: [{ qualifier: 'pricing', label: 'Total Price', position: 20 }]
    TotalPrice;
    @UI.fieldGroup: [{ qualifier: 'pricing', label: 'Currency Code', position: 30 }]
    CurrencyCode;
//    Description;
    @UI.selectionField: [{ position: 50 }]
    @UI.lineItem: [{ position: 70 , criticality: 'Criticality',
                     importance: #HIGH }]
    @UI.dataPoint: { title: 'Travel Status', qualifier: 'status', criticality: 'Criticality' }
    @UI.fieldGroup: [{ qualifier: 'dates', label: 'Status', position: 30 }]
    OverallStatus;
    @UI.lineItem: [{ position: 80 , importance: #HIGH }]
    @EndUserText.label: 'CO2Tax'
    CO2Tax;
    @UI.lineItem: [{ position: 90 , importance: #HIGH }]
    @EndUserText.label: 'Day of Flight'
    dayOfTheFlight;
    
//    @UI.fieldGroup: [{ qualifier: 'spiderman', label: 'Created By', position: 10 }]
//    CreatedBy;
//    @UI.fieldGroup: [{ qualifier: 'spiderman', label: 'Created On', position: 20 }]
//    CreatedAt;
//    @UI.fieldGroup: [{ qualifier: 'spiderman', label: 'Changed By', position: 30 }]
//    LastChangedBy;
//    @UI.fieldGroup: [{ qualifier: 'spiderman', label: 'Changed On', position: 40 }]
//    LastChangedAt;
    
}






