@EndUserText.label : 'Business partner table'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #ALLOWED
define table zats_xx_bpa {
  key client   : abap.clnt not null;
  key bp_id    : zats_xx_dte_id not null;
  bp_role      : zats_xx_dte_bp_role;
  @EndUserText.label : 'Company Name'
  company_name : abap.string(256);
  @EndUserText.label : 'Street'
  street       : abap.string(256);
  @EndUserText.label : 'Country'
  country      : abap.char(3);
  @EndUserText.label : 'Region'
  region       : abap.char(5);
  @EndUserText.label : 'City'
  city         : abap.string(256);

}


@EndUserText.label : 'product table'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zats_xx_product {
  key client     : abap.clnt not null;
  key product_id : zats_xx_dte_id not null;
  name           : abap.string(256);
  category       : abap.char(40);
  price          : int4;
  currency       : abap.cuky;
  discount       : abap.int4;

}


@EndUserText.label : 'Sales order header'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zats_xx_so_hdr {
  key client    : abap.clnt not null;
  key order_id  : zats_xx_dte_id not null;
  order_no      : int4;
  @AbapCatalog.foreignKey.screenCheck : false
  buyer         : zats_xx_dte_id not null
    with foreign key [0..*,1] zats_xx_bpa
      where bp_id = zats_xx_so_hdr.buyer;
  @Semantics.amount.currencyCode : 'zats_xx_so_hdr.currency_code'
  gross_amount  : abap.curr(10,2);
  currency_code : abap.cuky;
  include zats_xx_admin_data;

}


@EndUserText.label : 'Sales order items'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zats_xx_so_item {
  key client  : abap.clnt not null;
  key item_id : zats_xx_dte_id not null;
  order_id    : zats_xx_dte_id not null;
  @AbapCatalog.foreignKey.screenCheck : false
  product     : zats_xx_dte_id not null
    with foreign key [0..*,1] zats_xx_product
      where product_id = zats_xx_so_item.product;
  @Semantics.quantity.unitOfMeasure : 'zats_xx_so_item.uom'
  qty         : abap.quan(5,0);
  uom         : abap.unit(3);
  @Semantics.amount.currencyCode : 'zats_xx_so_item.currency'
  amount      : abap.curr(15,2);
  currency    : abap.cuky;

}


@EndUserText.label : 'Administrative data - structure'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
define structure zats_xx_admin_data {
  created_by : abap.char(16);
  created_on : timestamp;
  changed_by : abap.char(16);
  changed_on : timestamp;

}

@AbapCatalog.sqlViewName: 'ZATSXXISALES'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Sales Basic, interface'
define view ZATS_XX_I_SALES as select from zats_xx_so_hdr as hdr 
association[1] to zats_xx_so_item as _Items
on $projection.OrderId = _Items.order_id
association[1] to I_Currency as _Currency
on $projection.CurrencyCode = _Currency.Currency
{
    key hdr.order_id as OrderId,
    hdr.order_no as OrderNo,
    hdr.buyer as Buyer,
    hdr.currency_code as CurrencyCode,
    _Items,
    _Currency._Text[Language=$session.system_language].CurrencyShortName
}



@AbapCatalog.sqlViewName: 'ZATSXXIPRODUCT'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Basic, interface, Product Data'
define view ZATS_XX_I_PRODUCT as select from zats_xx_product {
    key product_id as ProductId,
    name as Name,
    category as Category,
    price as Price,
    currency as Currency,
    discount as Discount
}



@AbapCatalog.sqlViewName: 'ZATSXXIBP'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Interface view, BP, master data, basic'
define view ZATS_XX_I_BP as select from zats_xx_bpa as bpa 
association[1] to I_Country as _Country on
$projection.Country = _Country.Country
{
    key bp_id as BpId,
    bp_role as BpRole,
    company_name as CompanyName,
    country as Country,
    _Country._Text[Language= $session.system_language].CountryName as CountryName
}





@AbapCatalog.sqlViewName: 'ZATSXXCOSLSCUE'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Cube view, composition, master and transaction'
define view ZATS_XX_CO_SALES_CUBE as select from ZATS_XX_I_SALES 
association[1] to ZATS_XX_I_BP as _BusinessPartner
on $projection.Buyer = _BusinessPartner.BpId
association[1] to ZATS_XX_I_PRODUCT as _Products
on $projection.Product = _Products.ProductId
{
  key ZATS_XX_I_SALES.OrderId,
  key ZATS_XX_I_SALES._Items.item_id as ItemId,
  ZATS_XX_I_SALES.OrderNo,
  ZATS_XX_I_SALES.Buyer,
  ZATS_XX_I_SALES.CurrencyCode,
  ZATS_XX_I_SALES.CurrencyShortName,
  /* Associations */
  ZATS_XX_I_SALES._Items.product as Product,
  ZATS_XX_I_SALES._Items.amount as GrossAmount,
  ZATS_XX_I_SALES._Items.currency as Currency,
  ZATS_XX_I_SALES._Items.qty as Quantity,
  ZATS_XX_I_SALES._Items.uom as UnitOfMeasure,
  _Products,
  _BusinessPartner
}
@AbapCatalog.sqlViewName: 'ZATSXXCSLSCUST'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Customer wise total sales per currency'
define view ZATS_XX_C_SLS_CUST as select from ZATS_XX_CO_SALES_CUBE {
    _BusinessPartner.CompanyName as CompanyName,
    _BusinessPartner.CountryName as CountryName,
    GrossAmount as TotalSales,
    Currency,
    Quantity as TotalQty,
    UnitOfMeasure
}




CLASS zats_xx_data_manager DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    interfaces if_oo_adt_classrun.
  PROTECTED SECTION.
  PRIVATE SECTION.
    methods flush.
    methods fill_master_data.
    methods fill_transaction_data.
ENDCLASS.



CLASS zats_xx_data_manager IMPLEMENTATION.
  METHOD if_oo_adt_classrun~main.
    flush( ).
    fill_master_data( ).
    fill_transaction_data(  ).
    out->write(
      EXPORTING
        data   = 'processing is completed successfully!'
*        name   =
*      RECEIVING
*        output =
    ).
  ENDMETHOD.

  METHOD fill_master_data.
    data : lt_bp type table of zats_xx_bpa,
           lt_prod type table of zats_xx_product.

    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'TACUM'
                    street = 'Victoria Street'
                    city = 'Kolkatta'
                    country = 'IN'
                    region = 'APJ'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'SAP'
                    street = 'Rosvelt Street Road'
                    city = 'Walldorf'
                    country = 'DE'
                    region = 'EMEA'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'Asia High tech'
                    street = '1-7-2 Otemachi'
                    city = 'Tokyo'
                    country = 'JP'
                    region = 'APJ'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'AVANTEL'
                    street = 'Bosque de Duraznos'
                    city = 'Maxico'
                    country = 'MX'
                    region = 'NA'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'Pear Computing Services'
                    street = 'Dunwoody Xing'
                    city = 'Atlanta, Georgia'
                    country = 'US'
                    region = 'NA'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'PicoBit'
                    street = 'Fith Avenue'
                    city = 'New York City'
                    country = 'US'
                    region = 'NA'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'TACUM'
                    street = 'Victoria Street'
                    city = 'Kolkatta'
                    country = 'IN'
                    region = 'APJ'
                    )
                    to lt_bp.
    append value #(
                    bp_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    bp_role = '01'
                    company_name = 'Indian IT Trading Company'
                    street = 'Nariman Point'
                    city = 'Mumbai'
                    country = 'IN'
                    region = 'APJ'
                    )
                    to lt_bp.

   append value #(
                    product_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    name = 'Blaster Extreme'
                    category = 'Speakers'
                    price = 1500
                    currency = 'INR'
                    discount = 3
                    )
                    to lt_prod.
    append value #(
                    product_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    name = 'Sound Booster'
                    category = 'Speakers'
                    price = 2500
                    currency = 'INR'
                    discount = 2
                    )
                    to lt_prod.
    append value #(
                    product_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    name = 'Smart Office'
                    category = 'Software'
                    price = 1540
                    currency = 'INR'
                    discount = 32
                    )
                    to lt_prod.
    append value #(
                    product_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    name = 'Smart Design'
                    category = 'Software'
                    price = 2400
                    currency = 'INR'
                    discount = 12
                    )
                    to lt_prod.
    append value #(
                    product_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    name = 'Transcend Carry pocket'
                    category = 'PCs'
                    price = 14000
                    currency = 'INR'
                    discount = 7
                    )
                    to lt_prod.
    append value #(
                    product_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32( )
                    name = 'Gaming Monster Pro'
                    category = 'PCs'
                    price = 15500
                    currency = 'INR'
                    discount = 8
                    )
                    to lt_prod.

     insert zats_xx_bpa from table @lt_bp.
     insert zats_xx_product from table @lt_prod.
  ENDMETHOD.

  METHOD fill_transaction_data.
    data : o_rand type REF TO cl_abap_random_int,
           n type i,
           seed type i,
           lv_date type timestamp,
           lv_ord_id type zats_xx_dte_id,
           lt_so type table of zats_xx_so_hdr,
           lt_so_i type table of zats_xx_so_item.

    seed = cl_abap_random=>seed( ).
    cl_abap_random_int=>create(
      EXPORTING
        seed = seed
        min  = 1
        max  = 7
      RECEIVING
        prng = o_rand
    ).
    get time stamp FIELD lv_date.

    select * from zats_xx_bpa into table @data(lt_bpa).
    select * from zats_xx_product into table @data(lt_prod).

    do 50 times.
        lv_ord_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32(  ).
        n = o_rand->get_next( ).
        read table lt_bpa into data(ls_bp) index n.
        append value #(
                order_id = lv_ord_id
                order_no = sy-index
                buyer = ls_bp-bp_id
                gross_amount = 10 * n
                currency_code = 'EUR'
                created_by = sy-uname
                created_on = lv_date
                changed_by = sy-uname
                changed_on = lv_date
         ) to lt_so.
        do 2 times.
            read table lt_prod into data(ls_prod) index n.
            append value #(
                item_id = cl_uuid_factory=>create_system_uuid( )->create_uuid_c32(  )
                order_id = lv_ord_id
                product = ls_prod-product_id
                qty =  n
                uom = 'EA'
                amount =  n * ls_prod-price
                currency = ls_prod-currency
         ) to lt_so_i.

        enddo.
    enddo.

    insert zats_xx_so_hdr from table @lt_so.
    insert zats_xx_so_item from table @lt_so_i.

  ENDMETHOD.

  METHOD flush.
    delete from : zats_xx_bpa, zats_xx_product, zats_xx_so_hdr, zats_xx_so_item.
  ENDMETHOD.

ENDCLASS.